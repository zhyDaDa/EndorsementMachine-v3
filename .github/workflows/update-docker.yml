name: Auto update docker # workflow名称，可以随意改
run-name: auto update docker ✨ # workflow运行时的名称，可以随意改
on: # workflow的事件钩子，告知程序什么时候出发自动部署
    push:
        branches: [release] # 在master分支有push操作的时候自动部署
jobs:
    # 第一个工作-build
    build-and-push: # 打包并上传docker镜像
        name: Build and Push Docker Image
        runs-on: ubuntu-latest # 依赖的环境,注意：actions提供的linux环境只有ubuntu
        steps:
            # 使用actions/checkout@v2获取项目中的代码（name是阶段名，可以随便填，每一个name必须对应一个run/uses）
            - name: Checkout
              uses: actions/checkout@v2
            # 创建docker镜像
            - name: Build Image
              # ${{ secrets.DOCKER_REPOSITORY }}是读取之前在Secret创建的名为DOCKER_REPOSITORY的值
              # 从项目根目录的dockerfile文件创建docker镜像
              run: docker build -t ghcr.io/zhydada/em-v3-git:${{ github.ref_name }} ./
            - name: Log in
              run: |
                  echo ${{ secrets.PAT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            # 将镜像提交到镜像仓库
            - name: Push Image
              run: docker push ghcr.io/zhydada/em-v3-git:${{ github.ref_name }}
            - name: Set image visibility to public
              run: |
                  TOKEN=$(echo "${{ secrets.GITHUB_TOKEN }}" | jq -Rr @uri)
                  PACKAGE_VERSION_ID=$(curl -X GET -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/user/packages/container/em-v3-git/versions | jq '.[0].id')
                  curl -X POST -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/user/packages/container/package/versions/$PACKAGE_VERSION_ID/visibility -d '{"visibility":"public"}'
    # 第二个工作-pull-docker
    pull-docker:
        needs: [build-and-push]
        name: Pull Docker
        runs-on: ubuntu-latest
        steps:
            #  先登录到ghcr.io
            - name: Log in
              run: |
                  echo ${{ secrets.PAT_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 停止现在的所有容器并删除
            - name: Remove Old Container
              run: |
                  docker rmi ghcr.io/zhydada/em-v3-git:${{ github.ref_name }}

            # 从ghcr.io拉取镜像
            - name: Pull Image
              run: docker pull ghcr.io/zhydada/em-v3-git:${{ github.ref_name }}

            # 运行镜像
            - name: Run Image
              run: docker run -d -p 80:80 ghcr.io/zhydada/em-v3-git:${{ github.ref_name }}
